//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("NevaModel", "fk_idRoleAnnounce", "StaffRole", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.StaffRole), "Announcement", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Announcement), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idAntennaType", "AntennaType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.AntennaType), "BasicStationModel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.BasicStationModel), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idModel", "BasicStationModel", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.BasicStationModel), "BasicStation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.BasicStation), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idCommsStandard", "CommsStandard", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.CommsStandard), "BasicStationModel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.BasicStationModel), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idConType", "ContractType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.ContractType), "SubContract", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SubContract), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idCrowd", "Crowdness", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Crowdness), "Neighborhood", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Neighborhood), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idSubEmail", "Subscriber", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Subscriber), "Email", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Email), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idGender", "Gender", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Gender), "Subscriber", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Subscriber), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idHard", "Hardware", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Hardware), "Rent", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Rent), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idHwType", "HwType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.HwType), "Hardware", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Hardware), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "idHwTypeSupport", "HwType", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MainApp.assets.models.HwType), "SupportHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SupportHistory), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idHood", "Neighborhood", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Neighborhood), "SubAddress", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SubAddress), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idSubPass", "Subscriber", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Subscriber), "Passport", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Passport), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idSubPhone", "Subscriber", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Subscriber), "Phone", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Phone), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idProblemType", "ProblemType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.ProblemType), "SupportHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SupportHistory), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idStaffReport", "Staff", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Staff), "Report", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Report), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idSConService", "ServiceDetails", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.ServiceDetails), "ConnectedService", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.ConnectedService), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idSTypeDetails", "ServiceType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.ServiceType), "ServiceDetails", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.ServiceDetails), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idServiceIssue", "ServiceIssue", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.ServiceIssue), "SupportHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SupportHistory), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "idServiceTypeSupport", "ServiceType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.ServiceType), "SupportHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SupportHistory), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idServiceWorkType", "ServiceWorkType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.ServiceWorkType), "SupportHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SupportHistory), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idRoleStaff", "StaffRole", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.StaffRole), "Staff", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Staff), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idStaffSupport", "Staff", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MainApp.assets.models.Staff), "SupportHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SupportHistory), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idSubAddress", "SubAddress", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.SubAddress), "Subscriber", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Subscriber), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idConConService", "SubContract", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.SubContract), "ConnectedService", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.ConnectedService), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idConRent", "SubContract", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.SubContract), "Rent", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.Rent), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idSubCon", "Subscriber", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Subscriber), "SubContract", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SubContract), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idSubPay", "Subscriber", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Subscriber), "SubPayment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SubPayment), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idSubSupport", "Subscriber", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.Subscriber), "SupportHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SupportHistory), true)]
[assembly: EdmRelationshipAttribute("NevaModel", "fk_idStatus", "SupportStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MainApp.assets.models.SupportStatus), "SupportHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MainApp.assets.models.SupportHistory), true)]

#endregion

namespace MainApp.assets.models
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class NevaEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект NevaEntities, используя строку соединения из раздела "NevaEntities" файла конфигурации приложения.
        /// </summary>
        public NevaEntities() : base("name=NevaEntities", "NevaEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта NevaEntities.
        /// </summary>
        public NevaEntities(string connectionString) : base(connectionString, "NevaEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта NevaEntities.
        /// </summary>
        public NevaEntities(EntityConnection connection) : base(connection, "NevaEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Announcement> Announcement
        {
            get
            {
                if ((_Announcement == null))
                {
                    _Announcement = base.CreateObjectSet<Announcement>("Announcement");
                }
                return _Announcement;
            }
        }
        private ObjectSet<Announcement> _Announcement;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<AntennaType> AntennaType
        {
            get
            {
                if ((_AntennaType == null))
                {
                    _AntennaType = base.CreateObjectSet<AntennaType>("AntennaType");
                }
                return _AntennaType;
            }
        }
        private ObjectSet<AntennaType> _AntennaType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<BasicStation> BasicStation
        {
            get
            {
                if ((_BasicStation == null))
                {
                    _BasicStation = base.CreateObjectSet<BasicStation>("BasicStation");
                }
                return _BasicStation;
            }
        }
        private ObjectSet<BasicStation> _BasicStation;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<BasicStationModel> BasicStationModel
        {
            get
            {
                if ((_BasicStationModel == null))
                {
                    _BasicStationModel = base.CreateObjectSet<BasicStationModel>("BasicStationModel");
                }
                return _BasicStationModel;
            }
        }
        private ObjectSet<BasicStationModel> _BasicStationModel;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CommsStandard> CommsStandard
        {
            get
            {
                if ((_CommsStandard == null))
                {
                    _CommsStandard = base.CreateObjectSet<CommsStandard>("CommsStandard");
                }
                return _CommsStandard;
            }
        }
        private ObjectSet<CommsStandard> _CommsStandard;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ContractType> ContractType
        {
            get
            {
                if ((_ContractType == null))
                {
                    _ContractType = base.CreateObjectSet<ContractType>("ContractType");
                }
                return _ContractType;
            }
        }
        private ObjectSet<ContractType> _ContractType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Crowdness> Crowdness
        {
            get
            {
                if ((_Crowdness == null))
                {
                    _Crowdness = base.CreateObjectSet<Crowdness>("Crowdness");
                }
                return _Crowdness;
            }
        }
        private ObjectSet<Crowdness> _Crowdness;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Email> Email
        {
            get
            {
                if ((_Email == null))
                {
                    _Email = base.CreateObjectSet<Email>("Email");
                }
                return _Email;
            }
        }
        private ObjectSet<Email> _Email;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Gender> Gender
        {
            get
            {
                if ((_Gender == null))
                {
                    _Gender = base.CreateObjectSet<Gender>("Gender");
                }
                return _Gender;
            }
        }
        private ObjectSet<Gender> _Gender;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Hardware> Hardware
        {
            get
            {
                if ((_Hardware == null))
                {
                    _Hardware = base.CreateObjectSet<Hardware>("Hardware");
                }
                return _Hardware;
            }
        }
        private ObjectSet<Hardware> _Hardware;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<HwType> HwType
        {
            get
            {
                if ((_HwType == null))
                {
                    _HwType = base.CreateObjectSet<HwType>("HwType");
                }
                return _HwType;
            }
        }
        private ObjectSet<HwType> _HwType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Neighborhood> Neighborhood
        {
            get
            {
                if ((_Neighborhood == null))
                {
                    _Neighborhood = base.CreateObjectSet<Neighborhood>("Neighborhood");
                }
                return _Neighborhood;
            }
        }
        private ObjectSet<Neighborhood> _Neighborhood;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Passport> Passport
        {
            get
            {
                if ((_Passport == null))
                {
                    _Passport = base.CreateObjectSet<Passport>("Passport");
                }
                return _Passport;
            }
        }
        private ObjectSet<Passport> _Passport;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Phone> Phone
        {
            get
            {
                if ((_Phone == null))
                {
                    _Phone = base.CreateObjectSet<Phone>("Phone");
                }
                return _Phone;
            }
        }
        private ObjectSet<Phone> _Phone;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ProblemType> ProblemType
        {
            get
            {
                if ((_ProblemType == null))
                {
                    _ProblemType = base.CreateObjectSet<ProblemType>("ProblemType");
                }
                return _ProblemType;
            }
        }
        private ObjectSet<ProblemType> _ProblemType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Report> Report
        {
            get
            {
                if ((_Report == null))
                {
                    _Report = base.CreateObjectSet<Report>("Report");
                }
                return _Report;
            }
        }
        private ObjectSet<Report> _Report;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ServiceDetails> ServiceDetails
        {
            get
            {
                if ((_ServiceDetails == null))
                {
                    _ServiceDetails = base.CreateObjectSet<ServiceDetails>("ServiceDetails");
                }
                return _ServiceDetails;
            }
        }
        private ObjectSet<ServiceDetails> _ServiceDetails;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ServiceIssue> ServiceIssue
        {
            get
            {
                if ((_ServiceIssue == null))
                {
                    _ServiceIssue = base.CreateObjectSet<ServiceIssue>("ServiceIssue");
                }
                return _ServiceIssue;
            }
        }
        private ObjectSet<ServiceIssue> _ServiceIssue;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ServiceType> ServiceType
        {
            get
            {
                if ((_ServiceType == null))
                {
                    _ServiceType = base.CreateObjectSet<ServiceType>("ServiceType");
                }
                return _ServiceType;
            }
        }
        private ObjectSet<ServiceType> _ServiceType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ServiceWorkType> ServiceWorkType
        {
            get
            {
                if ((_ServiceWorkType == null))
                {
                    _ServiceWorkType = base.CreateObjectSet<ServiceWorkType>("ServiceWorkType");
                }
                return _ServiceWorkType;
            }
        }
        private ObjectSet<ServiceWorkType> _ServiceWorkType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Staff> Staff
        {
            get
            {
                if ((_Staff == null))
                {
                    _Staff = base.CreateObjectSet<Staff>("Staff");
                }
                return _Staff;
            }
        }
        private ObjectSet<Staff> _Staff;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffRole> StaffRole
        {
            get
            {
                if ((_StaffRole == null))
                {
                    _StaffRole = base.CreateObjectSet<StaffRole>("StaffRole");
                }
                return _StaffRole;
            }
        }
        private ObjectSet<StaffRole> _StaffRole;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SubAddress> SubAddress
        {
            get
            {
                if ((_SubAddress == null))
                {
                    _SubAddress = base.CreateObjectSet<SubAddress>("SubAddress");
                }
                return _SubAddress;
            }
        }
        private ObjectSet<SubAddress> _SubAddress;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SubContract> SubContract
        {
            get
            {
                if ((_SubContract == null))
                {
                    _SubContract = base.CreateObjectSet<SubContract>("SubContract");
                }
                return _SubContract;
            }
        }
        private ObjectSet<SubContract> _SubContract;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SubPayment> SubPayment
        {
            get
            {
                if ((_SubPayment == null))
                {
                    _SubPayment = base.CreateObjectSet<SubPayment>("SubPayment");
                }
                return _SubPayment;
            }
        }
        private ObjectSet<SubPayment> _SubPayment;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Subscriber> Subscriber
        {
            get
            {
                if ((_Subscriber == null))
                {
                    _Subscriber = base.CreateObjectSet<Subscriber>("Subscriber");
                }
                return _Subscriber;
            }
        }
        private ObjectSet<Subscriber> _Subscriber;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SupportStatus> SupportStatus
        {
            get
            {
                if ((_SupportStatus == null))
                {
                    _SupportStatus = base.CreateObjectSet<SupportStatus>("SupportStatus");
                }
                return _SupportStatus;
            }
        }
        private ObjectSet<SupportStatus> _SupportStatus;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ConnectedService> ConnectedService
        {
            get
            {
                if ((_ConnectedService == null))
                {
                    _ConnectedService = base.CreateObjectSet<ConnectedService>("ConnectedService");
                }
                return _ConnectedService;
            }
        }
        private ObjectSet<ConnectedService> _ConnectedService;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Rent> Rent
        {
            get
            {
                if ((_Rent == null))
                {
                    _Rent = base.CreateObjectSet<Rent>("Rent");
                }
                return _Rent;
            }
        }
        private ObjectSet<Rent> _Rent;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SupportHistory> SupportHistory
        {
            get
            {
                if ((_SupportHistory == null))
                {
                    _SupportHistory = base.CreateObjectSet<SupportHistory>("SupportHistory");
                }
                return _SupportHistory;
            }
        }
        private ObjectSet<SupportHistory> _SupportHistory;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Announcement. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAnnouncement(Announcement announcement)
        {
            base.AddObject("Announcement", announcement);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet AntennaType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAntennaType(AntennaType antennaType)
        {
            base.AddObject("AntennaType", antennaType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet BasicStation. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToBasicStation(BasicStation basicStation)
        {
            base.AddObject("BasicStation", basicStation);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet BasicStationModel. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToBasicStationModel(BasicStationModel basicStationModel)
        {
            base.AddObject("BasicStationModel", basicStationModel);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CommsStandard. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCommsStandard(CommsStandard commsStandard)
        {
            base.AddObject("CommsStandard", commsStandard);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ContractType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToContractType(ContractType contractType)
        {
            base.AddObject("ContractType", contractType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Crowdness. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCrowdness(Crowdness crowdness)
        {
            base.AddObject("Crowdness", crowdness);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Email. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToEmail(Email email)
        {
            base.AddObject("Email", email);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Gender. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToGender(Gender gender)
        {
            base.AddObject("Gender", gender);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Hardware. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToHardware(Hardware hardware)
        {
            base.AddObject("Hardware", hardware);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet HwType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToHwType(HwType hwType)
        {
            base.AddObject("HwType", hwType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Neighborhood. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToNeighborhood(Neighborhood neighborhood)
        {
            base.AddObject("Neighborhood", neighborhood);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Passport. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPassport(Passport passport)
        {
            base.AddObject("Passport", passport);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Phone. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPhone(Phone phone)
        {
            base.AddObject("Phone", phone);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ProblemType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToProblemType(ProblemType problemType)
        {
            base.AddObject("ProblemType", problemType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Report. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToReport(Report report)
        {
            base.AddObject("Report", report);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ServiceDetails. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToServiceDetails(ServiceDetails serviceDetails)
        {
            base.AddObject("ServiceDetails", serviceDetails);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ServiceIssue. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToServiceIssue(ServiceIssue serviceIssue)
        {
            base.AddObject("ServiceIssue", serviceIssue);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ServiceType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToServiceType(ServiceType serviceType)
        {
            base.AddObject("ServiceType", serviceType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ServiceWorkType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToServiceWorkType(ServiceWorkType serviceWorkType)
        {
            base.AddObject("ServiceWorkType", serviceWorkType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Staff. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaff(Staff staff)
        {
            base.AddObject("Staff", staff);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffRole. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffRole(StaffRole staffRole)
        {
            base.AddObject("StaffRole", staffRole);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SubAddress. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSubAddress(SubAddress subAddress)
        {
            base.AddObject("SubAddress", subAddress);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SubContract. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSubContract(SubContract subContract)
        {
            base.AddObject("SubContract", subContract);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SubPayment. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSubPayment(SubPayment subPayment)
        {
            base.AddObject("SubPayment", subPayment);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Subscriber. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSubscriber(Subscriber subscriber)
        {
            base.AddObject("Subscriber", subscriber);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SupportStatus. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSupportStatus(SupportStatus supportStatus)
        {
            base.AddObject("SupportStatus", supportStatus);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ConnectedService. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToConnectedService(ConnectedService connectedService)
        {
            base.AddObject("ConnectedService", connectedService);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Rent. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToRent(Rent rent)
        {
            base.AddObject("Rent", rent);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SupportHistory. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSupportHistory(SupportHistory supportHistory)
        {
            base.AddObject("SupportHistory", supportHistory);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Announcement")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Announcement : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Announcement.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="idRole">Исходное значение свойства idRole.</param>
        public static Announcement CreateAnnouncement(global::System.Int32 id, global::System.Int32 idRole)
        {
            Announcement announcement = new Announcement();
            announcement.id = id;
            announcement.idRole = idRole;
            return announcement;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idRole
        {
            get
            {
                return _idRole;
            }
            set
            {
                OnidRoleChanging(value);
                ReportPropertyChanging("idRole");
                _idRole = StructuralObject.SetValidValue(value, "idRole");
                ReportPropertyChanged("idRole");
                OnidRoleChanged();
            }
        }
        private global::System.Int32 _idRole;
        partial void OnidRoleChanging(global::System.Int32 value);
        partial void OnidRoleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AnnouncementText
        {
            get
            {
                return _AnnouncementText;
            }
            set
            {
                OnAnnouncementTextChanging(value);
                ReportPropertyChanging("AnnouncementText");
                _AnnouncementText = StructuralObject.SetValidValue(value, true, "AnnouncementText");
                ReportPropertyChanged("AnnouncementText");
                OnAnnouncementTextChanged();
            }
        }
        private global::System.String _AnnouncementText;
        partial void OnAnnouncementTextChanging(global::System.String value);
        partial void OnAnnouncementTextChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idRoleAnnounce", "StaffRole")]
        public StaffRole StaffRole
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffRole>("NevaModel.fk_idRoleAnnounce", "StaffRole").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffRole>("NevaModel.fk_idRoleAnnounce", "StaffRole").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffRole> StaffRoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffRole>("NevaModel.fk_idRoleAnnounce", "StaffRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffRole>("NevaModel.fk_idRoleAnnounce", "StaffRole", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="AntennaType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AntennaType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта AntennaType.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="antennaName">Исходное значение свойства AntennaName.</param>
        public static AntennaType CreateAntennaType(global::System.Int32 id, global::System.String antennaName)
        {
            AntennaType antennaType = new AntennaType();
            antennaType.id = id;
            antennaType.AntennaName = antennaName;
            return antennaType;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AntennaName
        {
            get
            {
                return _AntennaName;
            }
            set
            {
                OnAntennaNameChanging(value);
                ReportPropertyChanging("AntennaName");
                _AntennaName = StructuralObject.SetValidValue(value, false, "AntennaName");
                ReportPropertyChanged("AntennaName");
                OnAntennaNameChanged();
            }
        }
        private global::System.String _AntennaName;
        partial void OnAntennaNameChanging(global::System.String value);
        partial void OnAntennaNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idAntennaType", "BasicStationModel")]
        public EntityCollection<BasicStationModel> BasicStationModel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BasicStationModel>("NevaModel.fk_idAntennaType", "BasicStationModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BasicStationModel>("NevaModel.fk_idAntennaType", "BasicStationModel", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="BasicStation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BasicStation : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта BasicStation.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="idModel">Исходное значение свойства idModel.</param>
        /// <param name="siteAddress">Исходное значение свойства SiteAddress.</param>
        /// <param name="locationPoint">Исходное значение свойства LocationPoint.</param>
        public static BasicStation CreateBasicStation(global::System.Int32 id, global::System.Int32 idModel, global::System.String siteAddress, global::System.String locationPoint)
        {
            BasicStation basicStation = new BasicStation();
            basicStation.id = id;
            basicStation.idModel = idModel;
            basicStation.SiteAddress = siteAddress;
            basicStation.LocationPoint = locationPoint;
            return basicStation;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idModel
        {
            get
            {
                return _idModel;
            }
            set
            {
                OnidModelChanging(value);
                ReportPropertyChanging("idModel");
                _idModel = StructuralObject.SetValidValue(value, "idModel");
                ReportPropertyChanged("idModel");
                OnidModelChanged();
            }
        }
        private global::System.Int32 _idModel;
        partial void OnidModelChanging(global::System.Int32 value);
        partial void OnidModelChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SiteAddress
        {
            get
            {
                return _SiteAddress;
            }
            set
            {
                OnSiteAddressChanging(value);
                ReportPropertyChanging("SiteAddress");
                _SiteAddress = StructuralObject.SetValidValue(value, false, "SiteAddress");
                ReportPropertyChanged("SiteAddress");
                OnSiteAddressChanged();
            }
        }
        private global::System.String _SiteAddress;
        partial void OnSiteAddressChanging(global::System.String value);
        partial void OnSiteAddressChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LocationPoint
        {
            get
            {
                return _LocationPoint;
            }
            set
            {
                OnLocationPointChanging(value);
                ReportPropertyChanging("LocationPoint");
                _LocationPoint = StructuralObject.SetValidValue(value, false, "LocationPoint");
                ReportPropertyChanged("LocationPoint");
                OnLocationPointChanged();
            }
        }
        private global::System.String _LocationPoint;
        partial void OnLocationPointChanging(global::System.String value);
        partial void OnLocationPointChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idModel", "BasicStationModel")]
        public BasicStationModel BasicStationModel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BasicStationModel>("NevaModel.fk_idModel", "BasicStationModel").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BasicStationModel>("NevaModel.fk_idModel", "BasicStationModel").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<BasicStationModel> BasicStationModelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BasicStationModel>("NevaModel.fk_idModel", "BasicStationModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<BasicStationModel>("NevaModel.fk_idModel", "BasicStationModel", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="BasicStationModel")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BasicStationModel : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта BasicStationModel.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="modelName">Исходное значение свойства ModelName.</param>
        /// <param name="areaSqKm">Исходное значение свойства AreaSqKm.</param>
        /// <param name="frequencyHz">Исходное значение свойства FrequencyHz.</param>
        /// <param name="idAntennaType">Исходное значение свойства idAntennaType.</param>
        /// <param name="handoverReadings">Исходное значение свойства HandoverReadings.</param>
        /// <param name="idCommsStandard">Исходное значение свойства idCommsStandard.</param>
        public static BasicStationModel CreateBasicStationModel(global::System.Int32 id, global::System.String modelName, global::System.Double areaSqKm, global::System.Int32 frequencyHz, global::System.Int32 idAntennaType, global::System.String handoverReadings, global::System.Int32 idCommsStandard)
        {
            BasicStationModel basicStationModel = new BasicStationModel();
            basicStationModel.id = id;
            basicStationModel.ModelName = modelName;
            basicStationModel.AreaSqKm = areaSqKm;
            basicStationModel.FrequencyHz = frequencyHz;
            basicStationModel.idAntennaType = idAntennaType;
            basicStationModel.HandoverReadings = handoverReadings;
            basicStationModel.idCommsStandard = idCommsStandard;
            return basicStationModel;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ModelName
        {
            get
            {
                return _ModelName;
            }
            set
            {
                OnModelNameChanging(value);
                ReportPropertyChanging("ModelName");
                _ModelName = StructuralObject.SetValidValue(value, false, "ModelName");
                ReportPropertyChanged("ModelName");
                OnModelNameChanged();
            }
        }
        private global::System.String _ModelName;
        partial void OnModelNameChanging(global::System.String value);
        partial void OnModelNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double AreaSqKm
        {
            get
            {
                return _AreaSqKm;
            }
            set
            {
                OnAreaSqKmChanging(value);
                ReportPropertyChanging("AreaSqKm");
                _AreaSqKm = StructuralObject.SetValidValue(value, "AreaSqKm");
                ReportPropertyChanged("AreaSqKm");
                OnAreaSqKmChanged();
            }
        }
        private global::System.Double _AreaSqKm;
        partial void OnAreaSqKmChanging(global::System.Double value);
        partial void OnAreaSqKmChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FrequencyHz
        {
            get
            {
                return _FrequencyHz;
            }
            set
            {
                OnFrequencyHzChanging(value);
                ReportPropertyChanging("FrequencyHz");
                _FrequencyHz = StructuralObject.SetValidValue(value, "FrequencyHz");
                ReportPropertyChanged("FrequencyHz");
                OnFrequencyHzChanged();
            }
        }
        private global::System.Int32 _FrequencyHz;
        partial void OnFrequencyHzChanging(global::System.Int32 value);
        partial void OnFrequencyHzChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idAntennaType
        {
            get
            {
                return _idAntennaType;
            }
            set
            {
                OnidAntennaTypeChanging(value);
                ReportPropertyChanging("idAntennaType");
                _idAntennaType = StructuralObject.SetValidValue(value, "idAntennaType");
                ReportPropertyChanged("idAntennaType");
                OnidAntennaTypeChanged();
            }
        }
        private global::System.Int32 _idAntennaType;
        partial void OnidAntennaTypeChanging(global::System.Int32 value);
        partial void OnidAntennaTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HandoverReadings
        {
            get
            {
                return _HandoverReadings;
            }
            set
            {
                OnHandoverReadingsChanging(value);
                ReportPropertyChanging("HandoverReadings");
                _HandoverReadings = StructuralObject.SetValidValue(value, false, "HandoverReadings");
                ReportPropertyChanged("HandoverReadings");
                OnHandoverReadingsChanged();
            }
        }
        private global::System.String _HandoverReadings;
        partial void OnHandoverReadingsChanging(global::System.String value);
        partial void OnHandoverReadingsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idCommsStandard
        {
            get
            {
                return _idCommsStandard;
            }
            set
            {
                OnidCommsStandardChanging(value);
                ReportPropertyChanging("idCommsStandard");
                _idCommsStandard = StructuralObject.SetValidValue(value, "idCommsStandard");
                ReportPropertyChanged("idCommsStandard");
                OnidCommsStandardChanged();
            }
        }
        private global::System.Int32 _idCommsStandard;
        partial void OnidCommsStandardChanging(global::System.Int32 value);
        partial void OnidCommsStandardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Coordinates
        {
            get
            {
                return _Coordinates;
            }
            set
            {
                OnCoordinatesChanging(value);
                ReportPropertyChanging("Coordinates");
                _Coordinates = StructuralObject.SetValidValue(value, true, "Coordinates");
                ReportPropertyChanged("Coordinates");
                OnCoordinatesChanged();
            }
        }
        private global::System.String _Coordinates;
        partial void OnCoordinatesChanging(global::System.String value);
        partial void OnCoordinatesChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idAntennaType", "AntennaType")]
        public AntennaType AntennaType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AntennaType>("NevaModel.fk_idAntennaType", "AntennaType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AntennaType>("NevaModel.fk_idAntennaType", "AntennaType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AntennaType> AntennaTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AntennaType>("NevaModel.fk_idAntennaType", "AntennaType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AntennaType>("NevaModel.fk_idAntennaType", "AntennaType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idModel", "BasicStation")]
        public EntityCollection<BasicStation> BasicStation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BasicStation>("NevaModel.fk_idModel", "BasicStation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BasicStation>("NevaModel.fk_idModel", "BasicStation", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idCommsStandard", "CommsStandard")]
        public CommsStandard CommsStandard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommsStandard>("NevaModel.fk_idCommsStandard", "CommsStandard").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommsStandard>("NevaModel.fk_idCommsStandard", "CommsStandard").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CommsStandard> CommsStandardReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommsStandard>("NevaModel.fk_idCommsStandard", "CommsStandard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CommsStandard>("NevaModel.fk_idCommsStandard", "CommsStandard", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="CommsStandard")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CommsStandard : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CommsStandard.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="commsStandardName">Исходное значение свойства CommsStandardName.</param>
        public static CommsStandard CreateCommsStandard(global::System.Int32 id, global::System.String commsStandardName)
        {
            CommsStandard commsStandard = new CommsStandard();
            commsStandard.id = id;
            commsStandard.CommsStandardName = commsStandardName;
            return commsStandard;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CommsStandardName
        {
            get
            {
                return _CommsStandardName;
            }
            set
            {
                OnCommsStandardNameChanging(value);
                ReportPropertyChanging("CommsStandardName");
                _CommsStandardName = StructuralObject.SetValidValue(value, false, "CommsStandardName");
                ReportPropertyChanged("CommsStandardName");
                OnCommsStandardNameChanged();
            }
        }
        private global::System.String _CommsStandardName;
        partial void OnCommsStandardNameChanging(global::System.String value);
        partial void OnCommsStandardNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idCommsStandard", "BasicStationModel")]
        public EntityCollection<BasicStationModel> BasicStationModel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BasicStationModel>("NevaModel.fk_idCommsStandard", "BasicStationModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BasicStationModel>("NevaModel.fk_idCommsStandard", "BasicStationModel", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="ConnectedService")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ConnectedService : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ConnectedService.
        /// </summary>
        /// <param name="idCon">Исходное значение свойства idCon.</param>
        /// <param name="idService">Исходное значение свойства idService.</param>
        public static ConnectedService CreateConnectedService(global::System.Int32 idCon, global::System.Int32 idService)
        {
            ConnectedService connectedService = new ConnectedService();
            connectedService.idCon = idCon;
            connectedService.idService = idService;
            return connectedService;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idCon
        {
            get
            {
                return _idCon;
            }
            set
            {
                if (_idCon != value)
                {
                    OnidConChanging(value);
                    ReportPropertyChanging("idCon");
                    _idCon = StructuralObject.SetValidValue(value, "idCon");
                    ReportPropertyChanged("idCon");
                    OnidConChanged();
                }
            }
        }
        private global::System.Int32 _idCon;
        partial void OnidConChanging(global::System.Int32 value);
        partial void OnidConChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idService
        {
            get
            {
                return _idService;
            }
            set
            {
                if (_idService != value)
                {
                    OnidServiceChanging(value);
                    ReportPropertyChanging("idService");
                    _idService = StructuralObject.SetValidValue(value, "idService");
                    ReportPropertyChanged("idService");
                    OnidServiceChanged();
                }
            }
        }
        private global::System.Int32 _idService;
        partial void OnidServiceChanging(global::System.Int32 value);
        partial void OnidServiceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ConnectedOn
        {
            get
            {
                return _ConnectedOn;
            }
            set
            {
                OnConnectedOnChanging(value);
                ReportPropertyChanging("ConnectedOn");
                _ConnectedOn = StructuralObject.SetValidValue(value, "ConnectedOn");
                ReportPropertyChanged("ConnectedOn");
                OnConnectedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ConnectedOn;
        partial void OnConnectedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnConnectedOnChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSConService", "ServiceDetails")]
        public ServiceDetails ServiceDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceDetails>("NevaModel.fk_idSConService", "ServiceDetails").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceDetails>("NevaModel.fk_idSConService", "ServiceDetails").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ServiceDetails> ServiceDetailsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceDetails>("NevaModel.fk_idSConService", "ServiceDetails");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ServiceDetails>("NevaModel.fk_idSConService", "ServiceDetails", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idConConService", "SubContract")]
        public SubContract SubContract
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubContract>("NevaModel.fk_idConConService", "SubContract").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubContract>("NevaModel.fk_idConConService", "SubContract").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SubContract> SubContractReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubContract>("NevaModel.fk_idConConService", "SubContract");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SubContract>("NevaModel.fk_idConConService", "SubContract", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="ContractType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ContractType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ContractType.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="typeName">Исходное значение свойства TypeName.</param>
        public static ContractType CreateContractType(global::System.Int32 id, global::System.String typeName)
        {
            ContractType contractType = new ContractType();
            contractType.id = id;
            contractType.TypeName = typeName;
            return contractType;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TypeName
        {
            get
            {
                return _TypeName;
            }
            set
            {
                OnTypeNameChanging(value);
                ReportPropertyChanging("TypeName");
                _TypeName = StructuralObject.SetValidValue(value, false, "TypeName");
                ReportPropertyChanged("TypeName");
                OnTypeNameChanged();
            }
        }
        private global::System.String _TypeName;
        partial void OnTypeNameChanging(global::System.String value);
        partial void OnTypeNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idConType", "SubContract")]
        public EntityCollection<SubContract> SubContract
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubContract>("NevaModel.fk_idConType", "SubContract");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubContract>("NevaModel.fk_idConType", "SubContract", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Crowdness")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Crowdness : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Crowdness.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="crowdnessName">Исходное значение свойства CrowdnessName.</param>
        public static Crowdness CreateCrowdness(global::System.Int32 id, global::System.String crowdnessName)
        {
            Crowdness crowdness = new Crowdness();
            crowdness.id = id;
            crowdness.CrowdnessName = crowdnessName;
            return crowdness;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CrowdnessName
        {
            get
            {
                return _CrowdnessName;
            }
            set
            {
                OnCrowdnessNameChanging(value);
                ReportPropertyChanging("CrowdnessName");
                _CrowdnessName = StructuralObject.SetValidValue(value, false, "CrowdnessName");
                ReportPropertyChanged("CrowdnessName");
                OnCrowdnessNameChanged();
            }
        }
        private global::System.String _CrowdnessName;
        partial void OnCrowdnessNameChanging(global::System.String value);
        partial void OnCrowdnessNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idCrowd", "Neighborhood")]
        public EntityCollection<Neighborhood> Neighborhood
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Neighborhood>("NevaModel.fk_idCrowd", "Neighborhood");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Neighborhood>("NevaModel.fk_idCrowd", "Neighborhood", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Email")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Email : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Email.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="idSub">Исходное значение свойства idSub.</param>
        /// <param name="email1">Исходное значение свойства Email1.</param>
        public static Email CreateEmail(global::System.Int32 id, global::System.Int32 idSub, global::System.String email1)
        {
            Email email = new Email();
            email.id = id;
            email.idSub = idSub;
            email.Email1 = email1;
            return email;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idSub
        {
            get
            {
                return _idSub;
            }
            set
            {
                OnidSubChanging(value);
                ReportPropertyChanging("idSub");
                _idSub = StructuralObject.SetValidValue(value, "idSub");
                ReportPropertyChanged("idSub");
                OnidSubChanged();
            }
        }
        private global::System.Int32 _idSub;
        partial void OnidSubChanging(global::System.Int32 value);
        partial void OnidSubChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Email1
        {
            get
            {
                return _Email1;
            }
            set
            {
                OnEmail1Changing(value);
                ReportPropertyChanging("Email1");
                _Email1 = StructuralObject.SetValidValue(value, false, "Email1");
                ReportPropertyChanged("Email1");
                OnEmail1Changed();
            }
        }
        private global::System.String _Email1;
        partial void OnEmail1Changing(global::System.String value);
        partial void OnEmail1Changed();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubEmail", "Subscriber")]
        public Subscriber Subscriber
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubEmail", "Subscriber").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubEmail", "Subscriber").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Subscriber> SubscriberReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubEmail", "Subscriber");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Subscriber>("NevaModel.fk_idSubEmail", "Subscriber", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Gender")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Gender : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Gender.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="genderName">Исходное значение свойства GenderName.</param>
        public static Gender CreateGender(global::System.Int32 id, global::System.String genderName)
        {
            Gender gender = new Gender();
            gender.id = id;
            gender.GenderName = genderName;
            return gender;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GenderName
        {
            get
            {
                return _GenderName;
            }
            set
            {
                OnGenderNameChanging(value);
                ReportPropertyChanging("GenderName");
                _GenderName = StructuralObject.SetValidValue(value, false, "GenderName");
                ReportPropertyChanged("GenderName");
                OnGenderNameChanged();
            }
        }
        private global::System.String _GenderName;
        partial void OnGenderNameChanging(global::System.String value);
        partial void OnGenderNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idGender", "Subscriber")]
        public EntityCollection<Subscriber> Subscriber
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Subscriber>("NevaModel.fk_idGender", "Subscriber");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Subscriber>("NevaModel.fk_idGender", "Subscriber", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Hardware")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Hardware : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Hardware.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="hardwareName">Исходное значение свойства HardwareName.</param>
        /// <param name="serialNum">Исходное значение свойства SerialNum.</param>
        /// <param name="idHwType">Исходное значение свойства idHwType.</param>
        public static Hardware CreateHardware(global::System.Int32 id, global::System.String hardwareName, global::System.String serialNum, global::System.Int32 idHwType)
        {
            Hardware hardware = new Hardware();
            hardware.id = id;
            hardware.HardwareName = hardwareName;
            hardware.SerialNum = serialNum;
            hardware.idHwType = idHwType;
            return hardware;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HardwareName
        {
            get
            {
                return _HardwareName;
            }
            set
            {
                OnHardwareNameChanging(value);
                ReportPropertyChanging("HardwareName");
                _HardwareName = StructuralObject.SetValidValue(value, false, "HardwareName");
                ReportPropertyChanged("HardwareName");
                OnHardwareNameChanged();
            }
        }
        private global::System.String _HardwareName;
        partial void OnHardwareNameChanging(global::System.String value);
        partial void OnHardwareNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SerialNum
        {
            get
            {
                return _SerialNum;
            }
            set
            {
                OnSerialNumChanging(value);
                ReportPropertyChanging("SerialNum");
                _SerialNum = StructuralObject.SetValidValue(value, false, "SerialNum");
                ReportPropertyChanged("SerialNum");
                OnSerialNumChanged();
            }
        }
        private global::System.String _SerialNum;
        partial void OnSerialNumChanging(global::System.String value);
        partial void OnSerialNumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idHwType
        {
            get
            {
                return _idHwType;
            }
            set
            {
                OnidHwTypeChanging(value);
                ReportPropertyChanging("idHwType");
                _idHwType = StructuralObject.SetValidValue(value, "idHwType");
                ReportPropertyChanged("idHwType");
                OnidHwTypeChanged();
            }
        }
        private global::System.Int32 _idHwType;
        partial void OnidHwTypeChanging(global::System.Int32 value);
        partial void OnidHwTypeChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idHard", "Rent")]
        public EntityCollection<Rent> Rent
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Rent>("NevaModel.fk_idHard", "Rent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Rent>("NevaModel.fk_idHard", "Rent", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idHwType", "HwType")]
        public HwType HwType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HwType>("NevaModel.fk_idHwType", "HwType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HwType>("NevaModel.fk_idHwType", "HwType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HwType> HwTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HwType>("NevaModel.fk_idHwType", "HwType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HwType>("NevaModel.fk_idHwType", "HwType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="HwType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HwType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта HwType.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="typeName">Исходное значение свойства TypeName.</param>
        public static HwType CreateHwType(global::System.Int32 id, global::System.String typeName)
        {
            HwType hwType = new HwType();
            hwType.id = id;
            hwType.TypeName = typeName;
            return hwType;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TypeName
        {
            get
            {
                return _TypeName;
            }
            set
            {
                OnTypeNameChanging(value);
                ReportPropertyChanging("TypeName");
                _TypeName = StructuralObject.SetValidValue(value, false, "TypeName");
                ReportPropertyChanged("TypeName");
                OnTypeNameChanged();
            }
        }
        private global::System.String _TypeName;
        partial void OnTypeNameChanging(global::System.String value);
        partial void OnTypeNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idHwType", "Hardware")]
        public EntityCollection<Hardware> Hardware
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Hardware>("NevaModel.fk_idHwType", "Hardware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Hardware>("NevaModel.fk_idHwType", "Hardware", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "idHwTypeSupport", "SupportHistory")]
        public EntityCollection<SupportHistory> SupportHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SupportHistory>("NevaModel.idHwTypeSupport", "SupportHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SupportHistory>("NevaModel.idHwTypeSupport", "SupportHistory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Neighborhood")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Neighborhood : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Neighborhood.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="hoodName">Исходное значение свойства HoodName.</param>
        /// <param name="areaSqKm">Исходное значение свойства AreaSqKm.</param>
        /// <param name="pop">Исходное значение свойства Pop.</param>
        /// <param name="idCrowdness">Исходное значение свойства idCrowdness.</param>
        public static Neighborhood CreateNeighborhood(global::System.Int32 id, global::System.String hoodName, global::System.Double areaSqKm, global::System.Int32 pop, global::System.Int32 idCrowdness)
        {
            Neighborhood neighborhood = new Neighborhood();
            neighborhood.id = id;
            neighborhood.HoodName = hoodName;
            neighborhood.AreaSqKm = areaSqKm;
            neighborhood.Pop = pop;
            neighborhood.idCrowdness = idCrowdness;
            return neighborhood;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HoodName
        {
            get
            {
                return _HoodName;
            }
            set
            {
                OnHoodNameChanging(value);
                ReportPropertyChanging("HoodName");
                _HoodName = StructuralObject.SetValidValue(value, false, "HoodName");
                ReportPropertyChanged("HoodName");
                OnHoodNameChanged();
            }
        }
        private global::System.String _HoodName;
        partial void OnHoodNameChanging(global::System.String value);
        partial void OnHoodNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double AreaSqKm
        {
            get
            {
                return _AreaSqKm;
            }
            set
            {
                OnAreaSqKmChanging(value);
                ReportPropertyChanging("AreaSqKm");
                _AreaSqKm = StructuralObject.SetValidValue(value, "AreaSqKm");
                ReportPropertyChanged("AreaSqKm");
                OnAreaSqKmChanged();
            }
        }
        private global::System.Double _AreaSqKm;
        partial void OnAreaSqKmChanging(global::System.Double value);
        partial void OnAreaSqKmChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Pop
        {
            get
            {
                return _Pop;
            }
            set
            {
                OnPopChanging(value);
                ReportPropertyChanging("Pop");
                _Pop = StructuralObject.SetValidValue(value, "Pop");
                ReportPropertyChanged("Pop");
                OnPopChanged();
            }
        }
        private global::System.Int32 _Pop;
        partial void OnPopChanging(global::System.Int32 value);
        partial void OnPopChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Stations
        {
            get
            {
                return _Stations;
            }
            set
            {
                OnStationsChanging(value);
                ReportPropertyChanging("Stations");
                _Stations = StructuralObject.SetValidValue(value, "Stations");
                ReportPropertyChanged("Stations");
                OnStationsChanged();
            }
        }
        private Nullable<global::System.Int32> _Stations;
        partial void OnStationsChanging(Nullable<global::System.Int32> value);
        partial void OnStationsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idCrowdness
        {
            get
            {
                return _idCrowdness;
            }
            set
            {
                OnidCrowdnessChanging(value);
                ReportPropertyChanging("idCrowdness");
                _idCrowdness = StructuralObject.SetValidValue(value, "idCrowdness");
                ReportPropertyChanged("idCrowdness");
                OnidCrowdnessChanged();
            }
        }
        private global::System.Int32 _idCrowdness;
        partial void OnidCrowdnessChanging(global::System.Int32 value);
        partial void OnidCrowdnessChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idCrowd", "Crowdness")]
        public Crowdness Crowdness
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Crowdness>("NevaModel.fk_idCrowd", "Crowdness").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Crowdness>("NevaModel.fk_idCrowd", "Crowdness").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Crowdness> CrowdnessReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Crowdness>("NevaModel.fk_idCrowd", "Crowdness");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Crowdness>("NevaModel.fk_idCrowd", "Crowdness", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idHood", "SubAddress")]
        public EntityCollection<SubAddress> SubAddress
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubAddress>("NevaModel.fk_idHood", "SubAddress");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubAddress>("NevaModel.fk_idHood", "SubAddress", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Passport")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Passport : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Passport.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="seriesNum">Исходное значение свойства SeriesNum.</param>
        /// <param name="idSubscriber">Исходное значение свойства idSubscriber.</param>
        /// <param name="depCode">Исходное значение свойства DepCode.</param>
        /// <param name="givenBy">Исходное значение свойства GivenBy.</param>
        /// <param name="dateGiven">Исходное значение свойства DateGiven.</param>
        /// <param name="assignedPlace">Исходное значение свойства AssignedPlace.</param>
        public static Passport CreatePassport(global::System.Int32 id, global::System.String seriesNum, global::System.Int32 idSubscriber, global::System.String depCode, global::System.String givenBy, global::System.DateTime dateGiven, global::System.String assignedPlace)
        {
            Passport passport = new Passport();
            passport.id = id;
            passport.SeriesNum = seriesNum;
            passport.idSubscriber = idSubscriber;
            passport.DepCode = depCode;
            passport.GivenBy = givenBy;
            passport.DateGiven = dateGiven;
            passport.AssignedPlace = assignedPlace;
            return passport;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SeriesNum
        {
            get
            {
                return _SeriesNum;
            }
            set
            {
                OnSeriesNumChanging(value);
                ReportPropertyChanging("SeriesNum");
                _SeriesNum = StructuralObject.SetValidValue(value, false, "SeriesNum");
                ReportPropertyChanged("SeriesNum");
                OnSeriesNumChanged();
            }
        }
        private global::System.String _SeriesNum;
        partial void OnSeriesNumChanging(global::System.String value);
        partial void OnSeriesNumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idSubscriber
        {
            get
            {
                return _idSubscriber;
            }
            set
            {
                OnidSubscriberChanging(value);
                ReportPropertyChanging("idSubscriber");
                _idSubscriber = StructuralObject.SetValidValue(value, "idSubscriber");
                ReportPropertyChanged("idSubscriber");
                OnidSubscriberChanged();
            }
        }
        private global::System.Int32 _idSubscriber;
        partial void OnidSubscriberChanging(global::System.Int32 value);
        partial void OnidSubscriberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DepCode
        {
            get
            {
                return _DepCode;
            }
            set
            {
                OnDepCodeChanging(value);
                ReportPropertyChanging("DepCode");
                _DepCode = StructuralObject.SetValidValue(value, false, "DepCode");
                ReportPropertyChanged("DepCode");
                OnDepCodeChanged();
            }
        }
        private global::System.String _DepCode;
        partial void OnDepCodeChanging(global::System.String value);
        partial void OnDepCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GivenBy
        {
            get
            {
                return _GivenBy;
            }
            set
            {
                OnGivenByChanging(value);
                ReportPropertyChanging("GivenBy");
                _GivenBy = StructuralObject.SetValidValue(value, false, "GivenBy");
                ReportPropertyChanged("GivenBy");
                OnGivenByChanged();
            }
        }
        private global::System.String _GivenBy;
        partial void OnGivenByChanging(global::System.String value);
        partial void OnGivenByChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateGiven
        {
            get
            {
                return _DateGiven;
            }
            set
            {
                OnDateGivenChanging(value);
                ReportPropertyChanging("DateGiven");
                _DateGiven = StructuralObject.SetValidValue(value, "DateGiven");
                ReportPropertyChanged("DateGiven");
                OnDateGivenChanged();
            }
        }
        private global::System.DateTime _DateGiven;
        partial void OnDateGivenChanging(global::System.DateTime value);
        partial void OnDateGivenChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AssignedPlace
        {
            get
            {
                return _AssignedPlace;
            }
            set
            {
                OnAssignedPlaceChanging(value);
                ReportPropertyChanging("AssignedPlace");
                _AssignedPlace = StructuralObject.SetValidValue(value, false, "AssignedPlace");
                ReportPropertyChanged("AssignedPlace");
                OnAssignedPlaceChanged();
            }
        }
        private global::System.String _AssignedPlace;
        partial void OnAssignedPlaceChanging(global::System.String value);
        partial void OnAssignedPlaceChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubPass", "Subscriber")]
        public Subscriber Subscriber
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubPass", "Subscriber").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubPass", "Subscriber").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Subscriber> SubscriberReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubPass", "Subscriber");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Subscriber>("NevaModel.fk_idSubPass", "Subscriber", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Phone")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Phone : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Phone.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="idSub">Исходное значение свойства idSub.</param>
        /// <param name="phoneNum">Исходное значение свойства PhoneNum.</param>
        public static Phone CreatePhone(global::System.Int32 id, global::System.Int32 idSub, global::System.String phoneNum)
        {
            Phone phone = new Phone();
            phone.id = id;
            phone.idSub = idSub;
            phone.PhoneNum = phoneNum;
            return phone;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idSub
        {
            get
            {
                return _idSub;
            }
            set
            {
                OnidSubChanging(value);
                ReportPropertyChanging("idSub");
                _idSub = StructuralObject.SetValidValue(value, "idSub");
                ReportPropertyChanged("idSub");
                OnidSubChanged();
            }
        }
        private global::System.Int32 _idSub;
        partial void OnidSubChanging(global::System.Int32 value);
        partial void OnidSubChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PhoneNum
        {
            get
            {
                return _PhoneNum;
            }
            set
            {
                OnPhoneNumChanging(value);
                ReportPropertyChanging("PhoneNum");
                _PhoneNum = StructuralObject.SetValidValue(value, false, "PhoneNum");
                ReportPropertyChanged("PhoneNum");
                OnPhoneNumChanged();
            }
        }
        private global::System.String _PhoneNum;
        partial void OnPhoneNumChanging(global::System.String value);
        partial void OnPhoneNumChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubPhone", "Subscriber")]
        public Subscriber Subscriber
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubPhone", "Subscriber").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubPhone", "Subscriber").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Subscriber> SubscriberReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubPhone", "Subscriber");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Subscriber>("NevaModel.fk_idSubPhone", "Subscriber", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="ProblemType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ProblemType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ProblemType.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="problemTypeName">Исходное значение свойства ProblemTypeName.</param>
        public static ProblemType CreateProblemType(global::System.Int32 id, global::System.String problemTypeName)
        {
            ProblemType problemType = new ProblemType();
            problemType.id = id;
            problemType.ProblemTypeName = problemTypeName;
            return problemType;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ProblemTypeName
        {
            get
            {
                return _ProblemTypeName;
            }
            set
            {
                OnProblemTypeNameChanging(value);
                ReportPropertyChanging("ProblemTypeName");
                _ProblemTypeName = StructuralObject.SetValidValue(value, false, "ProblemTypeName");
                ReportPropertyChanged("ProblemTypeName");
                OnProblemTypeNameChanged();
            }
        }
        private global::System.String _ProblemTypeName;
        partial void OnProblemTypeNameChanging(global::System.String value);
        partial void OnProblemTypeNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idProblemType", "SupportHistory")]
        public EntityCollection<SupportHistory> SupportHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SupportHistory>("NevaModel.fk_idProblemType", "SupportHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SupportHistory>("NevaModel.fk_idProblemType", "SupportHistory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Rent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Rent : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Rent.
        /// </summary>
        /// <param name="idCon">Исходное значение свойства idCon.</param>
        /// <param name="idHard">Исходное значение свойства idHard.</param>
        public static Rent CreateRent(global::System.Int32 idCon, global::System.Int32 idHard)
        {
            Rent rent = new Rent();
            rent.idCon = idCon;
            rent.idHard = idHard;
            return rent;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idCon
        {
            get
            {
                return _idCon;
            }
            set
            {
                if (_idCon != value)
                {
                    OnidConChanging(value);
                    ReportPropertyChanging("idCon");
                    _idCon = StructuralObject.SetValidValue(value, "idCon");
                    ReportPropertyChanged("idCon");
                    OnidConChanged();
                }
            }
        }
        private global::System.Int32 _idCon;
        partial void OnidConChanging(global::System.Int32 value);
        partial void OnidConChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idHard
        {
            get
            {
                return _idHard;
            }
            set
            {
                if (_idHard != value)
                {
                    OnidHardChanging(value);
                    ReportPropertyChanging("idHard");
                    _idHard = StructuralObject.SetValidValue(value, "idHard");
                    ReportPropertyChanged("idHard");
                    OnidHardChanged();
                }
            }
        }
        private global::System.Int32 _idHard;
        partial void OnidHardChanging(global::System.Int32 value);
        partial void OnidHardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Payment
        {
            get
            {
                return _Payment;
            }
            set
            {
                OnPaymentChanging(value);
                ReportPropertyChanging("Payment");
                _Payment = StructuralObject.SetValidValue(value, "Payment");
                ReportPropertyChanged("Payment");
                OnPaymentChanged();
            }
        }
        private Nullable<global::System.Double> _Payment;
        partial void OnPaymentChanging(Nullable<global::System.Double> value);
        partial void OnPaymentChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idHard", "Hardware")]
        public Hardware Hardware
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hardware>("NevaModel.fk_idHard", "Hardware").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hardware>("NevaModel.fk_idHard", "Hardware").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Hardware> HardwareReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hardware>("NevaModel.fk_idHard", "Hardware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Hardware>("NevaModel.fk_idHard", "Hardware", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idConRent", "SubContract")]
        public SubContract SubContract
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubContract>("NevaModel.fk_idConRent", "SubContract").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubContract>("NevaModel.fk_idConRent", "SubContract").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SubContract> SubContractReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubContract>("NevaModel.fk_idConRent", "SubContract");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SubContract>("NevaModel.fk_idConRent", "SubContract", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Report")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Report : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Report.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="idStaff">Исходное значение свойства idStaff.</param>
        /// <param name="reportDate">Исходное значение свойства ReportDate.</param>
        public static Report CreateReport(global::System.Int32 id, global::System.Int32 idStaff, global::System.DateTime reportDate)
        {
            Report report = new Report();
            report.id = id;
            report.idStaff = idStaff;
            report.ReportDate = reportDate;
            return report;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idStaff
        {
            get
            {
                return _idStaff;
            }
            set
            {
                OnidStaffChanging(value);
                ReportPropertyChanging("idStaff");
                _idStaff = StructuralObject.SetValidValue(value, "idStaff");
                ReportPropertyChanged("idStaff");
                OnidStaffChanged();
            }
        }
        private global::System.Int32 _idStaff;
        partial void OnidStaffChanging(global::System.Int32 value);
        partial void OnidStaffChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Report1
        {
            get
            {
                return _Report1;
            }
            set
            {
                OnReport1Changing(value);
                ReportPropertyChanging("Report1");
                _Report1 = StructuralObject.SetValidValue(value, true, "Report1");
                ReportPropertyChanged("Report1");
                OnReport1Changed();
            }
        }
        private global::System.String _Report1;
        partial void OnReport1Changing(global::System.String value);
        partial void OnReport1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ReportDate
        {
            get
            {
                return _ReportDate;
            }
            set
            {
                OnReportDateChanging(value);
                ReportPropertyChanging("ReportDate");
                _ReportDate = StructuralObject.SetValidValue(value, "ReportDate");
                ReportPropertyChanged("ReportDate");
                OnReportDateChanged();
            }
        }
        private global::System.DateTime _ReportDate;
        partial void OnReportDateChanging(global::System.DateTime value);
        partial void OnReportDateChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idStaffReport", "Staff")]
        public Staff Staff
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Staff>("NevaModel.fk_idStaffReport", "Staff").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Staff>("NevaModel.fk_idStaffReport", "Staff").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Staff> StaffReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Staff>("NevaModel.fk_idStaffReport", "Staff");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Staff>("NevaModel.fk_idStaffReport", "Staff", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="ServiceDetails")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ServiceDetails : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ServiceDetails.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="serviceName">Исходное значение свойства ServiceName.</param>
        /// <param name="price">Исходное значение свойства Price.</param>
        /// <param name="idServiceType">Исходное значение свойства idServiceType.</param>
        /// <param name="restrictions">Исходное значение свойства Restrictions.</param>
        public static ServiceDetails CreateServiceDetails(global::System.Int32 id, global::System.String serviceName, global::System.Double price, global::System.Int32 idServiceType, global::System.String restrictions)
        {
            ServiceDetails serviceDetails = new ServiceDetails();
            serviceDetails.id = id;
            serviceDetails.ServiceName = serviceName;
            serviceDetails.Price = price;
            serviceDetails.idServiceType = idServiceType;
            serviceDetails.Restrictions = restrictions;
            return serviceDetails;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ServiceName
        {
            get
            {
                return _ServiceName;
            }
            set
            {
                OnServiceNameChanging(value);
                ReportPropertyChanging("ServiceName");
                _ServiceName = StructuralObject.SetValidValue(value, false, "ServiceName");
                ReportPropertyChanged("ServiceName");
                OnServiceNameChanged();
            }
        }
        private global::System.String _ServiceName;
        partial void OnServiceNameChanging(global::System.String value);
        partial void OnServiceNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Price
        {
            get
            {
                return _Price;
            }
            set
            {
                OnPriceChanging(value);
                ReportPropertyChanging("Price");
                _Price = StructuralObject.SetValidValue(value, "Price");
                ReportPropertyChanged("Price");
                OnPriceChanged();
            }
        }
        private global::System.Double _Price;
        partial void OnPriceChanging(global::System.Double value);
        partial void OnPriceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idServiceType
        {
            get
            {
                return _idServiceType;
            }
            set
            {
                OnidServiceTypeChanging(value);
                ReportPropertyChanging("idServiceType");
                _idServiceType = StructuralObject.SetValidValue(value, "idServiceType");
                ReportPropertyChanged("idServiceType");
                OnidServiceTypeChanged();
            }
        }
        private global::System.Int32 _idServiceType;
        partial void OnidServiceTypeChanging(global::System.Int32 value);
        partial void OnidServiceTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Restrictions
        {
            get
            {
                return _Restrictions;
            }
            set
            {
                OnRestrictionsChanging(value);
                ReportPropertyChanging("Restrictions");
                _Restrictions = StructuralObject.SetValidValue(value, false, "Restrictions");
                ReportPropertyChanged("Restrictions");
                OnRestrictionsChanged();
            }
        }
        private global::System.String _Restrictions;
        partial void OnRestrictionsChanging(global::System.String value);
        partial void OnRestrictionsChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSConService", "ConnectedService")]
        public EntityCollection<ConnectedService> ConnectedService
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ConnectedService>("NevaModel.fk_idSConService", "ConnectedService");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ConnectedService>("NevaModel.fk_idSConService", "ConnectedService", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSTypeDetails", "ServiceType")]
        public ServiceType ServiceType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceType>("NevaModel.fk_idSTypeDetails", "ServiceType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceType>("NevaModel.fk_idSTypeDetails", "ServiceType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ServiceType> ServiceTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceType>("NevaModel.fk_idSTypeDetails", "ServiceType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ServiceType>("NevaModel.fk_idSTypeDetails", "ServiceType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="ServiceIssue")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ServiceIssue : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ServiceIssue.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="issueName">Исходное значение свойства IssueName.</param>
        public static ServiceIssue CreateServiceIssue(global::System.Int32 id, global::System.String issueName)
        {
            ServiceIssue serviceIssue = new ServiceIssue();
            serviceIssue.id = id;
            serviceIssue.IssueName = issueName;
            return serviceIssue;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IssueName
        {
            get
            {
                return _IssueName;
            }
            set
            {
                OnIssueNameChanging(value);
                ReportPropertyChanging("IssueName");
                _IssueName = StructuralObject.SetValidValue(value, false, "IssueName");
                ReportPropertyChanged("IssueName");
                OnIssueNameChanged();
            }
        }
        private global::System.String _IssueName;
        partial void OnIssueNameChanging(global::System.String value);
        partial void OnIssueNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idServiceIssue", "SupportHistory")]
        public EntityCollection<SupportHistory> SupportHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SupportHistory>("NevaModel.fk_idServiceIssue", "SupportHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SupportHistory>("NevaModel.fk_idServiceIssue", "SupportHistory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="ServiceType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ServiceType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ServiceType.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="serviceTypeName">Исходное значение свойства ServiceTypeName.</param>
        public static ServiceType CreateServiceType(global::System.Int32 id, global::System.String serviceTypeName)
        {
            ServiceType serviceType = new ServiceType();
            serviceType.id = id;
            serviceType.ServiceTypeName = serviceTypeName;
            return serviceType;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ServiceTypeName
        {
            get
            {
                return _ServiceTypeName;
            }
            set
            {
                OnServiceTypeNameChanging(value);
                ReportPropertyChanging("ServiceTypeName");
                _ServiceTypeName = StructuralObject.SetValidValue(value, false, "ServiceTypeName");
                ReportPropertyChanged("ServiceTypeName");
                OnServiceTypeNameChanged();
            }
        }
        private global::System.String _ServiceTypeName;
        partial void OnServiceTypeNameChanging(global::System.String value);
        partial void OnServiceTypeNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSTypeDetails", "ServiceDetails")]
        public EntityCollection<ServiceDetails> ServiceDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ServiceDetails>("NevaModel.fk_idSTypeDetails", "ServiceDetails");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ServiceDetails>("NevaModel.fk_idSTypeDetails", "ServiceDetails", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "idServiceTypeSupport", "SupportHistory")]
        public EntityCollection<SupportHistory> SupportHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SupportHistory>("NevaModel.idServiceTypeSupport", "SupportHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SupportHistory>("NevaModel.idServiceTypeSupport", "SupportHistory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="ServiceWorkType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ServiceWorkType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ServiceWorkType.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="workTypeName">Исходное значение свойства WorkTypeName.</param>
        public static ServiceWorkType CreateServiceWorkType(global::System.Int32 id, global::System.String workTypeName)
        {
            ServiceWorkType serviceWorkType = new ServiceWorkType();
            serviceWorkType.id = id;
            serviceWorkType.WorkTypeName = workTypeName;
            return serviceWorkType;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String WorkTypeName
        {
            get
            {
                return _WorkTypeName;
            }
            set
            {
                OnWorkTypeNameChanging(value);
                ReportPropertyChanging("WorkTypeName");
                _WorkTypeName = StructuralObject.SetValidValue(value, false, "WorkTypeName");
                ReportPropertyChanged("WorkTypeName");
                OnWorkTypeNameChanged();
            }
        }
        private global::System.String _WorkTypeName;
        partial void OnWorkTypeNameChanging(global::System.String value);
        partial void OnWorkTypeNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idServiceWorkType", "SupportHistory")]
        public EntityCollection<SupportHistory> SupportHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SupportHistory>("NevaModel.fk_idServiceWorkType", "SupportHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SupportHistory>("NevaModel.fk_idServiceWorkType", "SupportHistory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Staff")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Staff : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Staff.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="lastName">Исходное значение свойства LastName.</param>
        /// <param name="firstName">Исходное значение свойства FirstName.</param>
        /// <param name="idRole">Исходное значение свойства idRole.</param>
        public static Staff CreateStaff(global::System.Int32 id, global::System.String lastName, global::System.String firstName, global::System.Int32 idRole)
        {
            Staff staff = new Staff();
            staff.id = id;
            staff.LastName = lastName;
            staff.FirstName = firstName;
            staff.idRole = idRole;
            return staff;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StaffPic
        {
            get
            {
                return _StaffPic;
            }
            set
            {
                OnStaffPicChanging(value);
                ReportPropertyChanging("StaffPic");
                _StaffPic = StructuralObject.SetValidValue(value, true, "StaffPic");
                ReportPropertyChanged("StaffPic");
                OnStaffPicChanged();
            }
        }
        private global::System.String _StaffPic;
        partial void OnStaffPicChanging(global::System.String value);
        partial void OnStaffPicChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false, "LastName");
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false, "FirstName");
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MiddleName
        {
            get
            {
                return _MiddleName;
            }
            set
            {
                OnMiddleNameChanging(value);
                ReportPropertyChanging("MiddleName");
                _MiddleName = StructuralObject.SetValidValue(value, true, "MiddleName");
                ReportPropertyChanged("MiddleName");
                OnMiddleNameChanged();
            }
        }
        private global::System.String _MiddleName;
        partial void OnMiddleNameChanging(global::System.String value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idRole
        {
            get
            {
                return _idRole;
            }
            set
            {
                OnidRoleChanging(value);
                ReportPropertyChanging("idRole");
                _idRole = StructuralObject.SetValidValue(value, "idRole");
                ReportPropertyChanged("idRole");
                OnidRoleChanged();
            }
        }
        private global::System.Int32 _idRole;
        partial void OnidRoleChanging(global::System.Int32 value);
        partial void OnidRoleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, true, "Username");
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StaffPass
        {
            get
            {
                return _StaffPass;
            }
            set
            {
                OnStaffPassChanging(value);
                ReportPropertyChanging("StaffPass");
                _StaffPass = StructuralObject.SetValidValue(value, true, "StaffPass");
                ReportPropertyChanged("StaffPass");
                OnStaffPassChanged();
            }
        }
        private global::System.String _StaffPass;
        partial void OnStaffPassChanging(global::System.String value);
        partial void OnStaffPassChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idStaffReport", "Report")]
        public EntityCollection<Report> Report
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Report>("NevaModel.fk_idStaffReport", "Report");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Report>("NevaModel.fk_idStaffReport", "Report", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idRoleStaff", "StaffRole")]
        public StaffRole StaffRole
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffRole>("NevaModel.fk_idRoleStaff", "StaffRole").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffRole>("NevaModel.fk_idRoleStaff", "StaffRole").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffRole> StaffRoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffRole>("NevaModel.fk_idRoleStaff", "StaffRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffRole>("NevaModel.fk_idRoleStaff", "StaffRole", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idStaffSupport", "SupportHistory")]
        public EntityCollection<SupportHistory> SupportHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SupportHistory>("NevaModel.fk_idStaffSupport", "SupportHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SupportHistory>("NevaModel.fk_idStaffSupport", "SupportHistory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="StaffRole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffRole : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffRole.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="roleName">Исходное значение свойства RoleName.</param>
        public static StaffRole CreateStaffRole(global::System.Int32 id, global::System.String roleName)
        {
            StaffRole staffRole = new StaffRole();
            staffRole.id = id;
            staffRole.RoleName = roleName;
            return staffRole;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleName
        {
            get
            {
                return _RoleName;
            }
            set
            {
                OnRoleNameChanging(value);
                ReportPropertyChanging("RoleName");
                _RoleName = StructuralObject.SetValidValue(value, false, "RoleName");
                ReportPropertyChanged("RoleName");
                OnRoleNameChanged();
            }
        }
        private global::System.String _RoleName;
        partial void OnRoleNameChanging(global::System.String value);
        partial void OnRoleNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idRoleAnnounce", "Announcement")]
        public EntityCollection<Announcement> Announcement
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Announcement>("NevaModel.fk_idRoleAnnounce", "Announcement");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Announcement>("NevaModel.fk_idRoleAnnounce", "Announcement", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idRoleStaff", "Staff")]
        public EntityCollection<Staff> Staff
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Staff>("NevaModel.fk_idRoleStaff", "Staff");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Staff>("NevaModel.fk_idRoleStaff", "Staff", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="SubAddress")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SubAddress : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SubAddress.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="idNeighborhood">Исходное значение свойства idNeighborhood.</param>
        /// <param name="internalName">Исходное значение свойства InternalName.</param>
        public static SubAddress CreateSubAddress(global::System.Int32 id, global::System.Int32 idNeighborhood, global::System.String internalName)
        {
            SubAddress subAddress = new SubAddress();
            subAddress.id = id;
            subAddress.idNeighborhood = idNeighborhood;
            subAddress.InternalName = internalName;
            return subAddress;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idNeighborhood
        {
            get
            {
                return _idNeighborhood;
            }
            set
            {
                OnidNeighborhoodChanging(value);
                ReportPropertyChanging("idNeighborhood");
                _idNeighborhood = StructuralObject.SetValidValue(value, "idNeighborhood");
                ReportPropertyChanged("idNeighborhood");
                OnidNeighborhoodChanged();
            }
        }
        private global::System.Int32 _idNeighborhood;
        partial void OnidNeighborhoodChanging(global::System.Int32 value);
        partial void OnidNeighborhoodChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                OnStreetChanging(value);
                ReportPropertyChanging("Street");
                _Street = StructuralObject.SetValidValue(value, true, "Street");
                ReportPropertyChanged("Street");
                OnStreetChanged();
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HouseNum
        {
            get
            {
                return _HouseNum;
            }
            set
            {
                OnHouseNumChanging(value);
                ReportPropertyChanging("HouseNum");
                _HouseNum = StructuralObject.SetValidValue(value, true, "HouseNum");
                ReportPropertyChanged("HouseNum");
                OnHouseNumChanged();
            }
        }
        private global::System.String _HouseNum;
        partial void OnHouseNumChanging(global::System.String value);
        partial void OnHouseNumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> HouseBuilding
        {
            get
            {
                return _HouseBuilding;
            }
            set
            {
                OnHouseBuildingChanging(value);
                ReportPropertyChanging("HouseBuilding");
                _HouseBuilding = StructuralObject.SetValidValue(value, "HouseBuilding");
                ReportPropertyChanged("HouseBuilding");
                OnHouseBuildingChanged();
            }
        }
        private Nullable<global::System.Int32> _HouseBuilding;
        partial void OnHouseBuildingChanging(Nullable<global::System.Int32> value);
        partial void OnHouseBuildingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> HouseFlat
        {
            get
            {
                return _HouseFlat;
            }
            set
            {
                OnHouseFlatChanging(value);
                ReportPropertyChanging("HouseFlat");
                _HouseFlat = StructuralObject.SetValidValue(value, "HouseFlat");
                ReportPropertyChanged("HouseFlat");
                OnHouseFlatChanged();
            }
        }
        private Nullable<global::System.Int32> _HouseFlat;
        partial void OnHouseFlatChanging(Nullable<global::System.Int32> value);
        partial void OnHouseFlatChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> HouseFlatRoom
        {
            get
            {
                return _HouseFlatRoom;
            }
            set
            {
                OnHouseFlatRoomChanging(value);
                ReportPropertyChanging("HouseFlatRoom");
                _HouseFlatRoom = StructuralObject.SetValidValue(value, "HouseFlatRoom");
                ReportPropertyChanged("HouseFlatRoom");
                OnHouseFlatRoomChanged();
            }
        }
        private Nullable<global::System.Int32> _HouseFlatRoom;
        partial void OnHouseFlatRoomChanging(Nullable<global::System.Int32> value);
        partial void OnHouseFlatRoomChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Zipcode
        {
            get
            {
                return _Zipcode;
            }
            set
            {
                OnZipcodeChanging(value);
                ReportPropertyChanging("Zipcode");
                _Zipcode = StructuralObject.SetValidValue(value, "Zipcode");
                ReportPropertyChanged("Zipcode");
                OnZipcodeChanged();
            }
        }
        private Nullable<global::System.Int32> _Zipcode;
        partial void OnZipcodeChanging(Nullable<global::System.Int32> value);
        partial void OnZipcodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String InternalName
        {
            get
            {
                return _InternalName;
            }
            set
            {
                OnInternalNameChanging(value);
                ReportPropertyChanging("InternalName");
                _InternalName = StructuralObject.SetValidValue(value, false, "InternalName");
                ReportPropertyChanged("InternalName");
                OnInternalNameChanged();
            }
        }
        private global::System.String _InternalName;
        partial void OnInternalNameChanging(global::System.String value);
        partial void OnInternalNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idHood", "Neighborhood")]
        public Neighborhood Neighborhood
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Neighborhood>("NevaModel.fk_idHood", "Neighborhood").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Neighborhood>("NevaModel.fk_idHood", "Neighborhood").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Neighborhood> NeighborhoodReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Neighborhood>("NevaModel.fk_idHood", "Neighborhood");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Neighborhood>("NevaModel.fk_idHood", "Neighborhood", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubAddress", "Subscriber")]
        public EntityCollection<Subscriber> Subscriber
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Subscriber>("NevaModel.fk_idSubAddress", "Subscriber");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Subscriber>("NevaModel.fk_idSubAddress", "Subscriber", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="SubContract")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SubContract : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SubContract.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="conNum">Исходное значение свойства ConNum.</param>
        /// <param name="madeOn">Исходное значение свойства MadeOn.</param>
        /// <param name="idType">Исходное значение свойства idType.</param>
        /// <param name="idSubscriber">Исходное значение свойства idSubscriber.</param>
        public static SubContract CreateSubContract(global::System.Int32 id, global::System.String conNum, global::System.DateTime madeOn, global::System.Int32 idType, global::System.Int32 idSubscriber)
        {
            SubContract subContract = new SubContract();
            subContract.id = id;
            subContract.ConNum = conNum;
            subContract.MadeOn = madeOn;
            subContract.idType = idType;
            subContract.idSubscriber = idSubscriber;
            return subContract;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ConNum
        {
            get
            {
                return _ConNum;
            }
            set
            {
                OnConNumChanging(value);
                ReportPropertyChanging("ConNum");
                _ConNum = StructuralObject.SetValidValue(value, false, "ConNum");
                ReportPropertyChanged("ConNum");
                OnConNumChanged();
            }
        }
        private global::System.String _ConNum;
        partial void OnConNumChanging(global::System.String value);
        partial void OnConNumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime MadeOn
        {
            get
            {
                return _MadeOn;
            }
            set
            {
                OnMadeOnChanging(value);
                ReportPropertyChanging("MadeOn");
                _MadeOn = StructuralObject.SetValidValue(value, "MadeOn");
                ReportPropertyChanged("MadeOn");
                OnMadeOnChanged();
            }
        }
        private global::System.DateTime _MadeOn;
        partial void OnMadeOnChanging(global::System.DateTime value);
        partial void OnMadeOnChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idType
        {
            get
            {
                return _idType;
            }
            set
            {
                OnidTypeChanging(value);
                ReportPropertyChanging("idType");
                _idType = StructuralObject.SetValidValue(value, "idType");
                ReportPropertyChanged("idType");
                OnidTypeChanged();
            }
        }
        private global::System.Int32 _idType;
        partial void OnidTypeChanging(global::System.Int32 value);
        partial void OnidTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> NullifiedOn
        {
            get
            {
                return _NullifiedOn;
            }
            set
            {
                OnNullifiedOnChanging(value);
                ReportPropertyChanging("NullifiedOn");
                _NullifiedOn = StructuralObject.SetValidValue(value, "NullifiedOn");
                ReportPropertyChanged("NullifiedOn");
                OnNullifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _NullifiedOn;
        partial void OnNullifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnNullifiedOnChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String NullifiedReason
        {
            get
            {
                return _NullifiedReason;
            }
            set
            {
                OnNullifiedReasonChanging(value);
                ReportPropertyChanging("NullifiedReason");
                _NullifiedReason = StructuralObject.SetValidValue(value, true, "NullifiedReason");
                ReportPropertyChanged("NullifiedReason");
                OnNullifiedReasonChanged();
            }
        }
        private global::System.String _NullifiedReason;
        partial void OnNullifiedReasonChanging(global::System.String value);
        partial void OnNullifiedReasonChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idSubscriber
        {
            get
            {
                return _idSubscriber;
            }
            set
            {
                OnidSubscriberChanging(value);
                ReportPropertyChanging("idSubscriber");
                _idSubscriber = StructuralObject.SetValidValue(value, "idSubscriber");
                ReportPropertyChanged("idSubscriber");
                OnidSubscriberChanged();
            }
        }
        private global::System.Int32 _idSubscriber;
        partial void OnidSubscriberChanging(global::System.Int32 value);
        partial void OnidSubscriberChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idConType", "ContractType")]
        public ContractType ContractType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractType>("NevaModel.fk_idConType", "ContractType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractType>("NevaModel.fk_idConType", "ContractType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ContractType> ContractTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractType>("NevaModel.fk_idConType", "ContractType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ContractType>("NevaModel.fk_idConType", "ContractType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idConConService", "ConnectedService")]
        public EntityCollection<ConnectedService> ConnectedService
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ConnectedService>("NevaModel.fk_idConConService", "ConnectedService");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ConnectedService>("NevaModel.fk_idConConService", "ConnectedService", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idConRent", "Rent")]
        public EntityCollection<Rent> Rent
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Rent>("NevaModel.fk_idConRent", "Rent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Rent>("NevaModel.fk_idConRent", "Rent", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubCon", "Subscriber")]
        public Subscriber Subscriber
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubCon", "Subscriber").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubCon", "Subscriber").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Subscriber> SubscriberReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubCon", "Subscriber");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Subscriber>("NevaModel.fk_idSubCon", "Subscriber", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="SubPayment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SubPayment : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SubPayment.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="paymentDate">Исходное значение свойства PaymentDate.</param>
        /// <param name="paymentSum">Исходное значение свойства PaymentSum.</param>
        /// <param name="subBalanceDate">Исходное значение свойства SubBalanceDate.</param>
        /// <param name="idSubscriber">Исходное значение свойства idSubscriber.</param>
        public static SubPayment CreateSubPayment(global::System.Int32 id, global::System.DateTime paymentDate, global::System.Double paymentSum, global::System.DateTime subBalanceDate, global::System.Int32 idSubscriber)
        {
            SubPayment subPayment = new SubPayment();
            subPayment.id = id;
            subPayment.PaymentDate = paymentDate;
            subPayment.PaymentSum = paymentSum;
            subPayment.SubBalanceDate = subBalanceDate;
            subPayment.idSubscriber = idSubscriber;
            return subPayment;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime PaymentDate
        {
            get
            {
                return _PaymentDate;
            }
            set
            {
                OnPaymentDateChanging(value);
                ReportPropertyChanging("PaymentDate");
                _PaymentDate = StructuralObject.SetValidValue(value, "PaymentDate");
                ReportPropertyChanged("PaymentDate");
                OnPaymentDateChanged();
            }
        }
        private global::System.DateTime _PaymentDate;
        partial void OnPaymentDateChanging(global::System.DateTime value);
        partial void OnPaymentDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double PaymentSum
        {
            get
            {
                return _PaymentSum;
            }
            set
            {
                OnPaymentSumChanging(value);
                ReportPropertyChanging("PaymentSum");
                _PaymentSum = StructuralObject.SetValidValue(value, "PaymentSum");
                ReportPropertyChanged("PaymentSum");
                OnPaymentSumChanged();
            }
        }
        private global::System.Double _PaymentSum;
        partial void OnPaymentSumChanging(global::System.Double value);
        partial void OnPaymentSumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> SubBalance
        {
            get
            {
                return _SubBalance;
            }
            set
            {
                OnSubBalanceChanging(value);
                ReportPropertyChanging("SubBalance");
                _SubBalance = StructuralObject.SetValidValue(value, "SubBalance");
                ReportPropertyChanged("SubBalance");
                OnSubBalanceChanged();
            }
        }
        private Nullable<global::System.Double> _SubBalance;
        partial void OnSubBalanceChanging(Nullable<global::System.Double> value);
        partial void OnSubBalanceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime SubBalanceDate
        {
            get
            {
                return _SubBalanceDate;
            }
            set
            {
                OnSubBalanceDateChanging(value);
                ReportPropertyChanging("SubBalanceDate");
                _SubBalanceDate = StructuralObject.SetValidValue(value, "SubBalanceDate");
                ReportPropertyChanged("SubBalanceDate");
                OnSubBalanceDateChanged();
            }
        }
        private global::System.DateTime _SubBalanceDate;
        partial void OnSubBalanceDateChanging(global::System.DateTime value);
        partial void OnSubBalanceDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Debt
        {
            get
            {
                return _Debt;
            }
            set
            {
                OnDebtChanging(value);
                ReportPropertyChanging("Debt");
                _Debt = StructuralObject.SetValidValue(value, "Debt");
                ReportPropertyChanged("Debt");
                OnDebtChanged();
            }
        }
        private Nullable<global::System.Double> _Debt;
        partial void OnDebtChanging(Nullable<global::System.Double> value);
        partial void OnDebtChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idSubscriber
        {
            get
            {
                return _idSubscriber;
            }
            set
            {
                OnidSubscriberChanging(value);
                ReportPropertyChanging("idSubscriber");
                _idSubscriber = StructuralObject.SetValidValue(value, "idSubscriber");
                ReportPropertyChanged("idSubscriber");
                OnidSubscriberChanged();
            }
        }
        private global::System.Int32 _idSubscriber;
        partial void OnidSubscriberChanging(global::System.Int32 value);
        partial void OnidSubscriberChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubPay", "Subscriber")]
        public Subscriber Subscriber
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubPay", "Subscriber").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubPay", "Subscriber").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Subscriber> SubscriberReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubPay", "Subscriber");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Subscriber>("NevaModel.fk_idSubPay", "Subscriber", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="Subscriber")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Subscriber : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Subscriber.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="subNum">Исходное значение свойства SubNum.</param>
        /// <param name="account">Исходное значение свойства Account.</param>
        /// <param name="lastName">Исходное значение свойства LastName.</param>
        /// <param name="firstName">Исходное значение свойства FirstName.</param>
        /// <param name="idSubAddress">Исходное значение свойства idSubAddress.</param>
        /// <param name="idGender">Исходное значение свойства idGender.</param>
        /// <param name="birthDate">Исходное значение свойства BirthDate.</param>
        public static Subscriber CreateSubscriber(global::System.Int32 id, global::System.String subNum, global::System.Int32 account, global::System.String lastName, global::System.String firstName, global::System.Int32 idSubAddress, global::System.Int32 idGender, global::System.DateTime birthDate)
        {
            Subscriber subscriber = new Subscriber();
            subscriber.id = id;
            subscriber.SubNum = subNum;
            subscriber.Account = account;
            subscriber.LastName = lastName;
            subscriber.FirstName = firstName;
            subscriber.idSubAddress = idSubAddress;
            subscriber.idGender = idGender;
            subscriber.BirthDate = birthDate;
            return subscriber;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SubNum
        {
            get
            {
                return _SubNum;
            }
            set
            {
                OnSubNumChanging(value);
                ReportPropertyChanging("SubNum");
                _SubNum = StructuralObject.SetValidValue(value, false, "SubNum");
                ReportPropertyChanged("SubNum");
                OnSubNumChanged();
            }
        }
        private global::System.String _SubNum;
        partial void OnSubNumChanging(global::System.String value);
        partial void OnSubNumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Account
        {
            get
            {
                return _Account;
            }
            set
            {
                OnAccountChanging(value);
                ReportPropertyChanging("Account");
                _Account = StructuralObject.SetValidValue(value, "Account");
                ReportPropertyChanged("Account");
                OnAccountChanged();
            }
        }
        private global::System.Int32 _Account;
        partial void OnAccountChanging(global::System.Int32 value);
        partial void OnAccountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false, "LastName");
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false, "FirstName");
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MiddleName
        {
            get
            {
                return _MiddleName;
            }
            set
            {
                OnMiddleNameChanging(value);
                ReportPropertyChanging("MiddleName");
                _MiddleName = StructuralObject.SetValidValue(value, true, "MiddleName");
                ReportPropertyChanged("MiddleName");
                OnMiddleNameChanged();
            }
        }
        private global::System.String _MiddleName;
        partial void OnMiddleNameChanging(global::System.String value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idSubAddress
        {
            get
            {
                return _idSubAddress;
            }
            set
            {
                OnidSubAddressChanging(value);
                ReportPropertyChanging("idSubAddress");
                _idSubAddress = StructuralObject.SetValidValue(value, "idSubAddress");
                ReportPropertyChanged("idSubAddress");
                OnidSubAddressChanged();
            }
        }
        private global::System.Int32 _idSubAddress;
        partial void OnidSubAddressChanging(global::System.Int32 value);
        partial void OnidSubAddressChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idGender
        {
            get
            {
                return _idGender;
            }
            set
            {
                OnidGenderChanging(value);
                ReportPropertyChanging("idGender");
                _idGender = StructuralObject.SetValidValue(value, "idGender");
                ReportPropertyChanged("idGender");
                OnidGenderChanged();
            }
        }
        private global::System.Int32 _idGender;
        partial void OnidGenderChanging(global::System.Int32 value);
        partial void OnidGenderChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime BirthDate
        {
            get
            {
                return _BirthDate;
            }
            set
            {
                OnBirthDateChanging(value);
                ReportPropertyChanging("BirthDate");
                _BirthDate = StructuralObject.SetValidValue(value, "BirthDate");
                ReportPropertyChanged("BirthDate");
                OnBirthDateChanged();
            }
        }
        private global::System.DateTime _BirthDate;
        partial void OnBirthDateChanging(global::System.DateTime value);
        partial void OnBirthDateChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubEmail", "Email")]
        public EntityCollection<Email> Email
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Email>("NevaModel.fk_idSubEmail", "Email");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Email>("NevaModel.fk_idSubEmail", "Email", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idGender", "Gender")]
        public Gender Gender
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Gender>("NevaModel.fk_idGender", "Gender").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Gender>("NevaModel.fk_idGender", "Gender").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Gender> GenderReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Gender>("NevaModel.fk_idGender", "Gender");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Gender>("NevaModel.fk_idGender", "Gender", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubPass", "Passport")]
        public EntityCollection<Passport> Passport
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Passport>("NevaModel.fk_idSubPass", "Passport");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Passport>("NevaModel.fk_idSubPass", "Passport", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubPhone", "Phone")]
        public EntityCollection<Phone> Phone
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Phone>("NevaModel.fk_idSubPhone", "Phone");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Phone>("NevaModel.fk_idSubPhone", "Phone", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubAddress", "SubAddress")]
        public SubAddress SubAddress
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubAddress>("NevaModel.fk_idSubAddress", "SubAddress").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubAddress>("NevaModel.fk_idSubAddress", "SubAddress").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SubAddress> SubAddressReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubAddress>("NevaModel.fk_idSubAddress", "SubAddress");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SubAddress>("NevaModel.fk_idSubAddress", "SubAddress", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubCon", "SubContract")]
        public EntityCollection<SubContract> SubContract
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubContract>("NevaModel.fk_idSubCon", "SubContract");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubContract>("NevaModel.fk_idSubCon", "SubContract", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubPay", "SubPayment")]
        public EntityCollection<SubPayment> SubPayment
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubPayment>("NevaModel.fk_idSubPay", "SubPayment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubPayment>("NevaModel.fk_idSubPay", "SubPayment", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubSupport", "SupportHistory")]
        public EntityCollection<SupportHistory> SupportHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SupportHistory>("NevaModel.fk_idSubSupport", "SupportHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SupportHistory>("NevaModel.fk_idSubSupport", "SupportHistory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="SupportHistory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SupportHistory : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SupportHistory.
        /// </summary>
        /// <param name="idSub">Исходное значение свойства idSub.</param>
        /// <param name="ticketNum">Исходное значение свойства TicketNum.</param>
        /// <param name="dateCreated">Исходное значение свойства DateCreated.</param>
        /// <param name="idServiceWorkType">Исходное значение свойства idServiceWorkType.</param>
        /// <param name="idServiceIssue">Исходное значение свойства idServiceIssue.</param>
        /// <param name="idStatus">Исходное значение свойства idStatus.</param>
        /// <param name="idProblemType">Исходное значение свойства idProblemType.</param>
        /// <param name="idServiceType">Исходное значение свойства idServiceType.</param>
        public static SupportHistory CreateSupportHistory(global::System.Int32 idSub, global::System.String ticketNum, global::System.DateTime dateCreated, global::System.Int32 idServiceWorkType, global::System.Int32 idServiceIssue, global::System.Int32 idStatus, global::System.Int32 idProblemType, global::System.Int32 idServiceType)
        {
            SupportHistory supportHistory = new SupportHistory();
            supportHistory.idSub = idSub;
            supportHistory.TicketNum = ticketNum;
            supportHistory.DateCreated = dateCreated;
            supportHistory.idServiceWorkType = idServiceWorkType;
            supportHistory.idServiceIssue = idServiceIssue;
            supportHistory.idStatus = idStatus;
            supportHistory.idProblemType = idProblemType;
            supportHistory.idServiceType = idServiceType;
            return supportHistory;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idSub
        {
            get
            {
                return _idSub;
            }
            set
            {
                if (_idSub != value)
                {
                    OnidSubChanging(value);
                    ReportPropertyChanging("idSub");
                    _idSub = StructuralObject.SetValidValue(value, "idSub");
                    ReportPropertyChanged("idSub");
                    OnidSubChanged();
                }
            }
        }
        private global::System.Int32 _idSub;
        partial void OnidSubChanging(global::System.Int32 value);
        partial void OnidSubChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TicketNum
        {
            get
            {
                return _TicketNum;
            }
            set
            {
                if (_TicketNum != value)
                {
                    OnTicketNumChanging(value);
                    ReportPropertyChanging("TicketNum");
                    _TicketNum = StructuralObject.SetValidValue(value, false, "TicketNum");
                    ReportPropertyChanged("TicketNum");
                    OnTicketNumChanged();
                }
            }
        }
        private global::System.String _TicketNum;
        partial void OnTicketNumChanging(global::System.String value);
        partial void OnTicketNumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                if (_DateCreated != value)
                {
                    OnDateCreatedChanging(value);
                    ReportPropertyChanging("DateCreated");
                    _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                    ReportPropertyChanged("DateCreated");
                    OnDateCreatedChanged();
                }
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateClosed
        {
            get
            {
                return _DateClosed;
            }
            set
            {
                OnDateClosedChanging(value);
                ReportPropertyChanging("DateClosed");
                _DateClosed = StructuralObject.SetValidValue(value, "DateClosed");
                ReportPropertyChanged("DateClosed");
                OnDateClosedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateClosed;
        partial void OnDateClosedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateClosedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idServiceWorkType
        {
            get
            {
                return _idServiceWorkType;
            }
            set
            {
                if (_idServiceWorkType != value)
                {
                    OnidServiceWorkTypeChanging(value);
                    ReportPropertyChanging("idServiceWorkType");
                    _idServiceWorkType = StructuralObject.SetValidValue(value, "idServiceWorkType");
                    ReportPropertyChanged("idServiceWorkType");
                    OnidServiceWorkTypeChanged();
                }
            }
        }
        private global::System.Int32 _idServiceWorkType;
        partial void OnidServiceWorkTypeChanging(global::System.Int32 value);
        partial void OnidServiceWorkTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idServiceIssue
        {
            get
            {
                return _idServiceIssue;
            }
            set
            {
                if (_idServiceIssue != value)
                {
                    OnidServiceIssueChanging(value);
                    ReportPropertyChanging("idServiceIssue");
                    _idServiceIssue = StructuralObject.SetValidValue(value, "idServiceIssue");
                    ReportPropertyChanged("idServiceIssue");
                    OnidServiceIssueChanged();
                }
            }
        }
        private global::System.Int32 _idServiceIssue;
        partial void OnidServiceIssueChanging(global::System.Int32 value);
        partial void OnidServiceIssueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idStatus
        {
            get
            {
                return _idStatus;
            }
            set
            {
                if (_idStatus != value)
                {
                    OnidStatusChanging(value);
                    ReportPropertyChanging("idStatus");
                    _idStatus = StructuralObject.SetValidValue(value, "idStatus");
                    ReportPropertyChanged("idStatus");
                    OnidStatusChanged();
                }
            }
        }
        private global::System.Int32 _idStatus;
        partial void OnidStatusChanging(global::System.Int32 value);
        partial void OnidStatusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idProblemType
        {
            get
            {
                return _idProblemType;
            }
            set
            {
                if (_idProblemType != value)
                {
                    OnidProblemTypeChanging(value);
                    ReportPropertyChanging("idProblemType");
                    _idProblemType = StructuralObject.SetValidValue(value, "idProblemType");
                    ReportPropertyChanged("idProblemType");
                    OnidProblemTypeChanged();
                }
            }
        }
        private global::System.Int32 _idProblemType;
        partial void OnidProblemTypeChanging(global::System.Int32 value);
        partial void OnidProblemTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ProblemDesc
        {
            get
            {
                return _ProblemDesc;
            }
            set
            {
                OnProblemDescChanging(value);
                ReportPropertyChanging("ProblemDesc");
                _ProblemDesc = StructuralObject.SetValidValue(value, true, "ProblemDesc");
                ReportPropertyChanged("ProblemDesc");
                OnProblemDescChanged();
            }
        }
        private global::System.String _ProblemDesc;
        partial void OnProblemDescChanging(global::System.String value);
        partial void OnProblemDescChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> idStaff
        {
            get
            {
                return _idStaff;
            }
            set
            {
                OnidStaffChanging(value);
                ReportPropertyChanging("idStaff");
                _idStaff = StructuralObject.SetValidValue(value, "idStaff");
                ReportPropertyChanged("idStaff");
                OnidStaffChanged();
            }
        }
        private Nullable<global::System.Int32> _idStaff;
        partial void OnidStaffChanging(Nullable<global::System.Int32> value);
        partial void OnidStaffChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idServiceType
        {
            get
            {
                return _idServiceType;
            }
            set
            {
                if (_idServiceType != value)
                {
                    OnidServiceTypeChanging(value);
                    ReportPropertyChanging("idServiceType");
                    _idServiceType = StructuralObject.SetValidValue(value, "idServiceType");
                    ReportPropertyChanged("idServiceType");
                    OnidServiceTypeChanged();
                }
            }
        }
        private global::System.Int32 _idServiceType;
        partial void OnidServiceTypeChanging(global::System.Int32 value);
        partial void OnidServiceTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> idHwType
        {
            get
            {
                return _idHwType;
            }
            set
            {
                OnidHwTypeChanging(value);
                ReportPropertyChanging("idHwType");
                _idHwType = StructuralObject.SetValidValue(value, "idHwType");
                ReportPropertyChanged("idHwType");
                OnidHwTypeChanged();
            }
        }
        private Nullable<global::System.Int32> _idHwType;
        partial void OnidHwTypeChanging(Nullable<global::System.Int32> value);
        partial void OnidHwTypeChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "idHwTypeSupport", "HwType")]
        public HwType HwType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HwType>("NevaModel.idHwTypeSupport", "HwType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HwType>("NevaModel.idHwTypeSupport", "HwType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HwType> HwTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HwType>("NevaModel.idHwTypeSupport", "HwType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HwType>("NevaModel.idHwTypeSupport", "HwType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idProblemType", "ProblemType")]
        public ProblemType ProblemType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProblemType>("NevaModel.fk_idProblemType", "ProblemType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProblemType>("NevaModel.fk_idProblemType", "ProblemType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ProblemType> ProblemTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProblemType>("NevaModel.fk_idProblemType", "ProblemType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ProblemType>("NevaModel.fk_idProblemType", "ProblemType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idServiceIssue", "ServiceIssue")]
        public ServiceIssue ServiceIssue
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceIssue>("NevaModel.fk_idServiceIssue", "ServiceIssue").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceIssue>("NevaModel.fk_idServiceIssue", "ServiceIssue").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ServiceIssue> ServiceIssueReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceIssue>("NevaModel.fk_idServiceIssue", "ServiceIssue");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ServiceIssue>("NevaModel.fk_idServiceIssue", "ServiceIssue", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "idServiceTypeSupport", "ServiceType")]
        public ServiceType ServiceType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceType>("NevaModel.idServiceTypeSupport", "ServiceType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceType>("NevaModel.idServiceTypeSupport", "ServiceType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ServiceType> ServiceTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceType>("NevaModel.idServiceTypeSupport", "ServiceType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ServiceType>("NevaModel.idServiceTypeSupport", "ServiceType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idServiceWorkType", "ServiceWorkType")]
        public ServiceWorkType ServiceWorkType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceWorkType>("NevaModel.fk_idServiceWorkType", "ServiceWorkType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceWorkType>("NevaModel.fk_idServiceWorkType", "ServiceWorkType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ServiceWorkType> ServiceWorkTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceWorkType>("NevaModel.fk_idServiceWorkType", "ServiceWorkType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ServiceWorkType>("NevaModel.fk_idServiceWorkType", "ServiceWorkType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idStaffSupport", "Staff")]
        public Staff Staff
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Staff>("NevaModel.fk_idStaffSupport", "Staff").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Staff>("NevaModel.fk_idStaffSupport", "Staff").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Staff> StaffReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Staff>("NevaModel.fk_idStaffSupport", "Staff");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Staff>("NevaModel.fk_idStaffSupport", "Staff", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idSubSupport", "Subscriber")]
        public Subscriber Subscriber
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubSupport", "Subscriber").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubSupport", "Subscriber").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Subscriber> SubscriberReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscriber>("NevaModel.fk_idSubSupport", "Subscriber");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Subscriber>("NevaModel.fk_idSubSupport", "Subscriber", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idStatus", "SupportStatus")]
        public SupportStatus SupportStatus
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SupportStatus>("NevaModel.fk_idStatus", "SupportStatus").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SupportStatus>("NevaModel.fk_idStatus", "SupportStatus").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SupportStatus> SupportStatusReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SupportStatus>("NevaModel.fk_idStatus", "SupportStatus");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SupportStatus>("NevaModel.fk_idStatus", "SupportStatus", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NevaModel", Name="SupportStatus")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SupportStatus : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SupportStatus.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="statusName">Исходное значение свойства StatusName.</param>
        public static SupportStatus CreateSupportStatus(global::System.Int32 id, global::System.String statusName)
        {
            SupportStatus supportStatus = new SupportStatus();
            supportStatus.id = id;
            supportStatus.StatusName = statusName;
            return supportStatus;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value, "id");
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StatusName
        {
            get
            {
                return _StatusName;
            }
            set
            {
                OnStatusNameChanging(value);
                ReportPropertyChanging("StatusName");
                _StatusName = StructuralObject.SetValidValue(value, false, "StatusName");
                ReportPropertyChanged("StatusName");
                OnStatusNameChanged();
            }
        }
        private global::System.String _StatusName;
        partial void OnStatusNameChanging(global::System.String value);
        partial void OnStatusNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NevaModel", "fk_idStatus", "SupportHistory")]
        public EntityCollection<SupportHistory> SupportHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SupportHistory>("NevaModel.fk_idStatus", "SupportHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SupportHistory>("NevaModel.fk_idStatus", "SupportHistory", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
